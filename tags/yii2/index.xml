<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>yii2 on YT Por</title><link>https://ytpor.github.io/tags/yii2/</link><description>Recent content in yii2 on YT Por</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 17 Jul 2021 13:00:00 +0800</lastBuildDate><atom:link href="https://ytpor.github.io/tags/yii2/index.xml" rel="self" type="application/rss+xml"/><item><title>Yii 2 Codeception Fixtures Gotcha</title><link>https://ytpor.github.io/2021/07/yii-2-codeception-fixtures-gotcha.html</link><pubDate>Sat, 17 Jul 2021 13:00:00 +0800</pubDate><guid>https://ytpor.github.io/2021/07/yii-2-codeception-fixtures-gotcha.html</guid><description>We use MongoDB (important point) with our Yii 2 applicaton.
While setting up our API test fixtures in our Cest file, $I-&amp;gt;grabFixture was not able to find the data we wanted eventhough we have defined it within the dataFile.
[yii\base\ErrorException] Trying to get property &amp;#39;client_id&amp;#39; of non-object Here&amp;rsquo;s what the dataFile looks like.
&amp;lt;?php // This doesn&amp;#39;t work. return [ &amp;#39;client_one&amp;#39; =&amp;gt; [ &amp;#39;client_id&amp;#39; =&amp;gt; &amp;#39;mytestclient&amp;#39;, ], ]; After some experimentation, we&amp;rsquo;ve found that we need to set the _id within the dataFile in order to get $I-&amp;gt;grabFixture to work properly.</description></item><item><title>Yii 2 Codeception API Test</title><link>https://ytpor.github.io/2021/06/yii-2-codeception-api-test.html</link><pubDate>Wed, 30 Jun 2021 21:00:00 +0800</pubDate><guid>https://ytpor.github.io/2021/06/yii-2-codeception-api-test.html</guid><description>My API uses the Yii2 advanced template. It uses symfony/dotenv to read the .env. The .env is loaded in all the configurations.
$dotenv = new Symfony\Component\Dotenv\Dotenv; $dotenv-&amp;gt;load(__DIR__ . &amp;#39;/../../.env&amp;#39;); While running the Codeception api test, I came across this error.
[PHPUnit\Framework\Exception] Undefined index: HOST at ../common/config/main-local.php:7 After much digging around, I&amp;rsquo;ve realized that I need to load Symfony\Component\Dotenv\Dotenv in common/config/codeception-local.php Thus, I have updated that file in the environment folder, and reran php init.</description></item><item><title>Yii 2 404 Not Found</title><link>https://ytpor.github.io/2021/06/yii-2-404-not-found.html</link><pubDate>Tue, 29 Jun 2021 13:00:00 +0800</pubDate><guid>https://ytpor.github.io/2021/06/yii-2-404-not-found.html</guid><description>After setting up a new application using Yii 2 Advanced Project Template, the very first time you want to load your new controller, if you are met with a 404 Not Found, one very likely cause is that you do not have a .htaccess in your web folder.</description></item><item><title>Yii2 URL manager cache class</title><link>https://ytpor.github.io/2020/04/yii2-url-manager-cache-class.html</link><pubDate>Thu, 09 Apr 2020 13:00:00 +0800</pubDate><guid>https://ytpor.github.io/2020/04/yii2-url-manager-cache-class.html</guid><description>You might come across the below warning if you have not set a cache to your Yii2 application while using URL manager.
Unable to use cache for URL manager: Failed to instantiate component or class &amp;#34;cache&amp;#34;. In order to remove that warning, setup a cache in your application&amp;rsquo;s configuration.
We are using the DummyCache class here as we have yet to decide on one that we want to use.
&amp;#39;components&amp;#39; =&amp;gt; [ &amp;#39;cache&amp;#39; =&amp;gt; [ &amp;#39;class&amp;#39; =&amp;gt; &amp;#39;yii\caching\DummyCache&amp;#39;, // FIXME ], ],</description></item><item><title>Yii2 Log using FileTarget</title><link>https://ytpor.github.io/2020/04/yii2-log-using-filetarget.html</link><pubDate>Thu, 09 Apr 2020 12:00:00 +0800</pubDate><guid>https://ytpor.github.io/2020/04/yii2-log-using-filetarget.html</guid><description>Here&amp;rsquo;s a sample Yii2 FileTarget configuration (to be added to the application&amp;rsquo;s configuration) used for logging. This configuration overwrite the default log file location, doesn&amp;rsquo;t capture the global PHP variables and also, adds a prefix to the log entry.
&amp;#39;bootstrap&amp;#39; =&amp;gt; [ &amp;#39;log&amp;#39;, ], &amp;#39;components&amp;#39; =&amp;gt; [ &amp;#39;log&amp;#39; =&amp;gt; [ &amp;#39;targets&amp;#39; =&amp;gt; [ [ &amp;#39;class&amp;#39; =&amp;gt; &amp;#39;yii\log\FileTarget&amp;#39;, &amp;#39;levels&amp;#39; =&amp;gt; [&amp;#39;error&amp;#39;, &amp;#39;info&amp;#39;], // Custom log file. Default log file will appear in @runtime/logs &amp;#39;logFile&amp;#39; =&amp;gt; dirname(__DIR__) .</description></item><item><title>Setup User and RBAC Management in Yii2</title><link>https://ytpor.github.io/2019/08/setup-user-and-rbac-management-in-yii2.html</link><pubDate>Mon, 26 Aug 2019 23:05:00 +0800</pubDate><guid>https://ytpor.github.io/2019/08/setup-user-and-rbac-management-in-yii2.html</guid><description>My goal for this exercise is to have User and RBAC management in my Yii 2 application.
I&amp;rsquo;ve started out with the Yii 2 Basic Project Template and I would be adding the Yii2-user and Yii2-rbac extensions to my web application.
Here are some of the steps I have taken to install and configure the extensions.
Step 1: Installation Install the packages.
composer require dektrium/yii2-user composer require dektrium/yii2-rbac Step 2: Configure the web application NOTE: Make sure that you don&amp;rsquo;t have user component configuration in your config files.</description></item><item><title>Nginx Configuration for Multiple Yii2 Site Under Same Domain</title><link>https://ytpor.github.io/2017/12/nginx-configuration-for-multiple-yii2.html</link><pubDate>Wed, 27 Dec 2017 16:03:00 +0800</pubDate><guid>https://ytpor.github.io/2017/12/nginx-configuration-for-multiple-yii2.html</guid><description>This nginx configuration will allow you to run multiple instances of Yii2 in sub folders under the same domain. Eg. http://advanced.local/ and http://advanced.local/subfolder/
server { listen 80; # listen for IPv4 server_name advanced.local; set $root_path /var/www/main/web; root $root_path; index index.html index.php; charset utf-8; client_max_body_size 100M; location / { root $root_path; try_files $uri $uri/ /index.php$is_args$args; } location ~ \.php$ { try_files $uri /$uri =404; fastcgi_pass unix:/var/run/php/php7.0-fpm.sock; include fastcgi_params; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; } location ^~ /subfolder { alias /var/www/subfolder/web; if (!</description></item></channel></rss>